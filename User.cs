//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace thetaskmanager
{
    using System;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using System.Security.Cryptography;
    using System.Web.Security;
    
    public partial class User
    {
        public User()
        {
            this.TaskGroups = new HashSet<TaskGroup>();
            this.Tasks = new HashSet<Task>();
            this.TaskTypes = new HashSet<TaskType>();
        }

        public Boolean Login(string usernameIn, string passwordIn)
        {
            Boolean loginResult = false;

            //Check if the user exists
            if (DoesUserExist(usernameIn))
            {
                using (var dbContextObj = new thetaskmanagerEntities())
                {
                    //Get the user's salt
                    var saltResult = from user in dbContextObj.Users
                                      where user.username == usernameIn
                                      select user.salt;
                    string[] saltResult_array;
                    saltResult_array = saltResult.ToArray();
                    this.salt = saltResult_array[0];

                    //Take the incoming password and hash it with the salt
                    string hashedPassword = CreatePasswordHash(passwordIn, saltResult_array[0]);

                    //Get the existing password hash from the database
                    var passwordResult = from user in dbContextObj.Users
                                  where user.username == usernameIn
                                  select user.password;
                    string[] passwordResult_array;
                    passwordResult_array = passwordResult.ToArray();

                    //compare the two password hashes
                    if (hashedPassword == passwordResult_array[0])
                    {
                        //set the username
                        this.username = usernameIn;

                        //get and set user id
                        var uidResult = from user in dbContextObj.Users
                                      where user.username == usernameIn
                                      select user.id;
                        byte[] uidResult_array = uidResult.ToArray();
                        this.id = uidResult_array[0];

                        //get and set first name
                        var fnameResult = from user in dbContextObj.Users
                                        where user.username == usernameIn
                                        select user.fname;
                        string[] fnameResult_array = fnameResult.ToArray();
                        this.fname = fnameResult_array[0];

                        //get and set last name
                        var lnameResult = from user in dbContextObj.Users
                                          where user.username == usernameIn
                                          select user.lname;
                        string[] lnameResult_array = lnameResult.ToArray();
                        this.lname = lnameResult_array[0];

                        //set the loginResult flag to indicate the user was successfully logged in
                        loginResult = true;
                    }
                }// using construct
            }

            return loginResult;
        }//end Login method

        /**
         * Check to see if the user exists in database. Return true if exists or false if not
         */
        public Boolean DoesUserExist(string usernameIn)
        {
            using (var dbContextObj = new thetaskmanagerEntities())
            {
                //Query the database for a user with the same username
                var queryResult = from user in dbContextObj.Users
                             where user.username == usernameIn
                             select user.username;

                //Count how many results are found (Duplicates)
                int resultCount = queryResult.Count();

                Boolean isDuplicate;

                if (resultCount < 1 )
                {
                    isDuplicate = false;
                }
                else
                {
                    isDuplicate = true;
                }// end if-else flow control

                return isDuplicate;
            }// using construct
        }

        //Create a random number to use as a "salt" (Padd the password)
        public string CreateSalt(int size)
        {
            // Generate a pseudo random number
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            byte[] buff = new byte[size];
            rng.GetBytes(buff);

            // Encode the number as a Base64 string and return it
            return Convert.ToBase64String(buff);
        }// end CreateSalt method

        //Hash the passing, using a salt
        public string CreatePasswordHash(string pwd, string salt)
        {
            //Append the salt onto the end of the password
            string saltAndPwd = String.Concat(pwd, salt);

            //Generate a SHA1 hash of the salt and password
            string hashedPwd = FormsAuthentication.HashPasswordForStoringInConfigFile(saltAndPwd, "SHA1");

            //Append the salt onto the end of the hash of the hashed password and salt
            hashedPwd = String.Concat(hashedPwd, salt);

            return hashedPwd;
        }// end CreatePasswordHash method
    
        public byte id { get; set; }
        public string fname { get; set; }
        public string lname { get; set; }
        public string username { get; set; }
        public string password { get; set; }
        public string salt { get; set; }
    
        public virtual ICollection<TaskGroup> TaskGroups { get; set; }
        public virtual ICollection<Task> Tasks { get; set; }
        public virtual ICollection<TaskType> TaskTypes { get; set; }
    }
}
